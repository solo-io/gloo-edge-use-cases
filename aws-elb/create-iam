#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT 

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] cluster region account_id

This script will create an IAM account for an AWS Load Balancer associated
with the given cluster, region and account_id.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # nothing to do
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params

    while :; do
        case "${1-}" in 
        -h | --help) usage ;;
        -v | --verbose) set -x ;;
        --no-color) NO_COLOR=1 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    args=("$@")

    # check required params and arguments
    [[ ${#args[@]} -eq 0 ]] && die "Missing required argument - cluster"
    [[ ${#args[@]} -eq 1 ]] && die "Missing required argument - region"
    [[ ${#args[@]} -eq 2 ]] && die "Missing required argument - account_id"

    return 0
}

parse_params "$@"
setup_colors

CLUSTER="${args[0]}"
REGION="${args[1]}"
ACCOUNT_ID="${args[2]}"
IAM_POLICY_NAME=AWSLoadBalancerControllerIAMPolicy
IAM_SA=aws-load-balancer-controller

# Script logic
echo ""
echo "Setting up IAM OIDC provider"
eksctl utils associate-iam-oidc-provider --region ${REGION} --cluster ${CLUSTER} --approve

echo ""
echo "Fetching the IAM policy for our service account"
curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.4/docs/install/iam_policy.json

echo ""
echo "Creating IAM policy"
aws iam create-policy --policy-name ${IAM_POLICY_NAME} --policy-document file://iam-policy.json

echo ""
echo "Creating the k8s service account"
eksctl create iamserviceaccount --cluster=${CLUSTER} --namespace=kube-system --name=${IAM_SA} --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/${IAM_POLICY_NAME} \
  --override-existing-serviceaccounts --approve --region ${REGION}

kubectl -n kube-system get sa aws-load-balancer-controller -o yaml

# Cleanup
cleanup